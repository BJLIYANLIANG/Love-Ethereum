
# Merkle Patricia Trie

以太坊使用了Merkle Patircia树（又称Merkle Patricia Trie，简称MPT），作为数据组织形式，用来组织管理用户的账户状态、交易信息等重要数据。MPT是一种加密认证的数据结构，它融合了Merkle树和Trie树（前缀树）两种数据类型的优点。


## Merkle树

* Merkle树是一种树形数据结构，可以是二叉树，也可以是多叉树。它由一组叶节点、一组中间节点和一个根节点构成。最下面的叶节点包含基础数据，每个中间节点是它的子节点的散列，根节点是它的子节点的散列，代表了Merkle树的根部。

* 创建Merkle树的目的是允许区块的数据可以零散地传送；节点可以从一个节点下载区块头，从另外的源下载与其相关的树的其他部分，而依然能够确认所有的数据都是正确的。之所以如此是因为散列向上扩散，如果一个恶意用户尝试在树的下部加入一个伪造的交易，所引起的改动将导致树的上层节点以及更上层节点的改动，最终导致根节点的改动以及区块散列的改动，这样协议就会将其记录为一个完全不同的区块。


## Trie树

Trie树也叫做Radix树。在Radix树中，key代表的是从树根到对应value的一条真实路径。即从根节点开始，key中的每个字符（从前到后）都代表着从根节点出发寻找相应value所要经过的子节点。value存储在叶节点中，是每条路径的最终节点。假如key中的每个字符都来自一个容量为N且所包含的字母都互不相同的字母表，那么树中的每个节点最多会有N个孩子，树的最大深度便是key的最大长度。

Radix树的优点有很多，其中一条就是：但是它也存在缺陷，那就是存储不平衡问题，即给定一个长度较长的key，在树中没有其他key与它有相同的前缀，那么在遍历或存储key所代表的value时，将会遍历或存储相当多的节点，因此这棵树是不平衡的。


## Merkle Patricia树

* 为了保证树的加密安全，每个节点通过它的散列值被引用，在当前的实现中，它们用于在LevelDB数据库中的查询。对于存储在LevelDB数据库中的非叶节点，其在数据库中的表现形式为：key代表着节点的RLP编码的SHA3散列值，value是节点的RLP编码。想要获得一个节点的内容，只需要根据该节点的散列值访问数据库以获得节点的RLP编码，然后解码即可。在该方案中，根节点被称为整棵树的加密签名，如果一棵给定Trie树的根散列值是公开的，那么所有人都可以提供一种证明，即通过提供每步向上的路径证明特定的key是否含有特定的值。


* 引入很多节点类型来提高效率。MPT（Merkle Patricia Tree）中的节点包括以下4种：

  空节点：简单的表示空，在代码中就是一个空串。

  叶节点：键值对的一个列表，其中key是一种特殊的十六进制编码，value是RLP编码。

  扩展节点：键值对的列表，但是这里的value是其他节点的散列值，通过这个散列值可以链接到其他节点。

  分支节点：一个长度为17的列表。







